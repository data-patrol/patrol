#!/usr/bin/env python3

import os 
import sys
import logging
import sqlite3
import argparse
import subprocess
import signal

# TODO: This is just a temp work-around that adds parent project directory to sys.path
dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(dir_path+'/../..')

from sqlalchemy import Table, Column, Integer, String, MetaData

from patrol.conf import conf
from patrol.executors import DEFAULT_EXECUTOR

from patrol import checks
from patrol import jobs
from patrol import executors
from patrol import class_lib
from patrol.data_model import initdb


log = logging.getLogger(__name__)


def print_header():
    HEADER = """\
        .______      ___   .___________.______       ______    __      
    |   _  \    /   \  |           |   _  \     /  __  \  |  |     
    |  |_)  |  /  ^  \ `---|  |----|  |_)  |   |  |  |  | |  |     
    |   ___/  /  /_\  \    |  |    |      /    |  |  |  | |  |     
    |  |     /  _____  \   |  |    |  |\  \----|  `--'  | |  `----.
    | _|    /__/     \__\  |__|    | _| `._____|\______/  |_______|
    """
    print(HEADER)


def create_test_data(): #TODO
    conn = sqlite3.connect("consumerdb.db")

    with conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS customers (customer_id INT, first_name TEXT, last_name TEXT)")
        cursor.execute("DELETE FROM customers")
        cursor.execute("INSERT INTO customers SELECT 1, 'Jeff', 'Smith'")
        cursor.execute("INSERT INTO customers SELECT 24, 'Bill', NULL")

        cursor.execute("CREATE TABLE IF NOT EXISTS orders (order_id INT, customer_id INT, order_descr TEXT, order_amt NUMERIC)")
        cursor.execute("DELETE FROM orders")
        cursor.execute("INSERT INTO orders SELECT 10010, 1, 'Service Q1', 500")
        cursor.execute("INSERT INTO orders SELECT 10011, 1, 'Service Q1', 500")
        cursor.execute("INSERT INTO orders SELECT 10012, 1, 'Service Q1', NULL")
        cursor.execute("INSERT INTO orders SELECT 10014, 209, 'Service Q3', 800")
        cursor.execute("INSERT INTO orders SELECT 10014, 577, 'Service Q3', 800")
        cursor.execute("INSERT INTO orders SELECT 10014, 591, 'Service Q3', 800")
        cursor.execute("INSERT INTO orders SELECT 10014, 1024, 'Service Q3', 800")

def test(args): #TODO
    print_header()
    log.info("Started patrol master process with PID: %s", os.getpid())
    
    create_test_data()    #TODO: temp

    # Test: Create and run an on-demand job
    job = jobs.OnDemandJob()
    job.add_check_to_job(global_check_registry.checks["sql_check_1"])
    job.add_check_to_job(global_check_registry.checks["sql_check_2"])
    job.run()

def run(args):
    if len(sys.argv) > 2:
        log.info("Started patrol worker process with PID: %s", os.getpid())
        # Get check from CheckRegistry
        check = global_check_registry.checks[sys.argv[2]]
        
        # Create and run CheckInstance
        check_instance = checks.CheckInstance(check)
        check_instance.run()
        log.info("Check execution completed!")

def webserver(args):
    gunicorn_args = [
            "gunicorn",
            'patrol.web.app:app',
            #'--workers', '1',
            '--bind', '0.0.0.0:8080',
        ]

    gunicorn_proc = subprocess.Popen(gunicorn_args, cwd="../..", close_fds=True)

initdb(None)

global_check_registry = checks.CheckRegistry()  #TODO: temp

function_map = {'test' : test, 
                'run' : run,
                'initdb': initdb,
                'webserver': webserver }

if len(sys.argv) > 1:
    if sys.argv[1] in function_map:
        func = function_map[sys.argv[1]]
        func(sys.argv)
