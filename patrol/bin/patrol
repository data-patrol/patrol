#!/usr/bin/env python3

import os 
import sys
import logging
import sqlite3
import argparse

# TODO: This is just a temp work-around that adds parent project directory to sys.path
dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(dir_path+'/../..')

from patrol.conf import conf
from patrol.executors import DEFAULT_EXECUTOR

from patrol import checks
from patrol import jobs
from patrol import executors
from patrol import class_lib
from patrol.data_model import initdb

from sqlalchemy import Table, Column, Integer, String, MetaData

log = logging.getLogger(__name__)


def print_header():
    HEADER = """\
        .______      ___   .___________.______       ______    __      
    |   _  \    /   \  |           |   _  \     /  __  \  |  |     
    |  |_)  |  /  ^  \ `---|  |----|  |_)  |   |  |  |  | |  |     
    |   ___/  /  /_\  \    |  |    |      /    |  |  |  | |  |     
    |  |     /  _____  \   |  |    |  |\  \----|  `--'  | |  `----.
    | _|    /__/     \__\  |__|    | _| `._____|\______/  |_______|
    """
    print(HEADER)


def create_test_data(): #TODO
    conn = sqlite3.connect("consumerdb.db")

    with conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS customers (customer_id INT, first_name TEXT, last_name TEXT)")
        cursor.execute("DELETE FROM customers")
        cursor.execute("INSERT INTO customers SELECT 1, 'Jeff', 'Smith'")
        cursor.execute("INSERT INTO customers SELECT 24, 'Bill', NULL")

        cursor.execute("CREATE TABLE IF NOT EXISTS orders (order_id INT, customer_id INT, order_descr TEXT, order_amt NUMERIC)")
        cursor.execute("DELETE FROM orders")
        cursor.execute("INSERT INTO orders SELECT 10010, 1, 'Service Q1', 500")
        cursor.execute("INSERT INTO orders SELECT 10011, 1, 'Service Q1', 500")
        cursor.execute("INSERT INTO orders SELECT 10012, 1, 'Service Q1', NULL")
        cursor.execute("INSERT INTO orders SELECT 10014, 209, 'Service Q3', 800")
        cursor.execute("INSERT INTO orders SELECT 10014, 577, 'Service Q3', 800")
        cursor.execute("INSERT INTO orders SELECT 10014, 591, 'Service Q3', 800")
        cursor.execute("INSERT INTO orders SELECT 10014, 1024, 'Service Q3', 800")

def create_test_checks(): #TODO
    ## connection ###
    #conn = class_lib.Connection("my_conn_1", "Sqlite", "consumerdb.db")
    
    # Databricks sample
    # conn = class_lib.Connection(
    #                     'my_conn_1', 
    #                     'Databricks',
    #                     'NNN.azuredatabricks.net',
    #                     '',
    #                     '<token>',
    #                     '{"http_path" : "sql/protocolv1/o/NNN/NNN"}')

    log.debug('==== started create_test_checks()')
    conn = class_lib.Connection(
                        'my_conn_1', 
                        'Sqlite',
                        'consumerdb.db')

    ### sql_check_1 ###
    sql_check_1 = checks.SimpleCheck(check_id='sql_check_1',name='Orders with unmatched customers')
    step_1 = checks.SimpleCheckStep(step_id = '1',
                                step_type = checks.StepType.QUERY,
                                query = """
                                SELECT 
                                    CASE 
                                        WHEN row_count = 0 THEN 0
                                        ELSE 2
                                    END as result, 
                                    *
                                FROM
                                (
                                    SELECT 
                                        COUNT(*) OVER () as row_count,
                                        * 
                                    FROM orders ord
                                    LEFT JOIN customers cus ON ord.customer_id = cus.customer_id
                                    WHERE cus.customer_id IS NULL
                                )
                                """,
                                connection = conn)
    sql_check_1.add_step(step_1)

    ### sql_check_2 ###
    sql_check_2 = checks.SimpleCheck(check_id='sql_check_2',name='Multistep. orders with unmatched customer')
    step_1 = checks.SimpleCheckStep(step_id = '1',
                                step_type = checks.StepType.PYTHON,
                                query = "check.py",
                                connection = conn)

    step_2 = checks.SimpleCheckStep(step_id = '2',
                                step_type = checks.StepType.QUERY,
                                query = """
                                SELECT 
                                    CASE
                                        WHEN row_count = 0 THEN 0
                                        ELSE 2
                                    END as result, 
                                    *
                                FROM
                                (
                                    SELECT 
                                        COUNT(*) OVER () as row_count,
                                        * 
                                    FROM orders ord
                                    LEFT JOIN customers cus ON ord.customer_id = cus.customer_id
                                    WHERE cus.customer_id IS NULL
                                )
                                """,
                                connection = conn)

    step_3 = checks.SimpleCheckStep(step_id = '3',
                                step_type = checks.StepType.QUERY,
                                query = """
                                    SELECT 
                                        CASE 
                                            WHEN row_count = 0 THEN 0
                                            ELSE 2
                                        END as result, 
                                        CASE 
                                            WHEN row_count = 0 THEN 0
                                            ELSE 2
                                        END as severity, 
                                        *
                                    FROM
                                    (
                                        SELECT 
                                            COUNT(*) OVER () as row_count,
                                            * 
                                        FROM customers cus
                                        WHERE cus.first_name IS NULL OR cus.last_name IS NULL
                                    )
                                """,
                                connection = conn)


    sql_check_2.add_step(step_1)
    #sql_check_2.add_step(step_2)
    sql_check_2.add_step(step_3)

    # Add checks to CheckRegistry
    # this is a temp hack, we will implement checks auto discovery and load from JSON files
    global_check_registry.add_check(sql_check_1)
    global_check_registry.add_check(sql_check_2)

def test(args): #TODO
    print_header()
    log.info("Started patrol master process with PID: %s", os.getpid())

    # Test: Create and run an on-demand job
    job = jobs.OnDemandJob()
    job.add_check_to_job(global_check_registry.checks["sql_check_1"])
    job.add_check_to_job(global_check_registry.checks["sql_check_2"])
    job.run()

def run(args):
    if len(sys.argv) > 2:
        log.info("Started patrol worker process with PID: %s", os.getpid())
        # Get check from CheckRegistry
        check = global_check_registry.checks[sys.argv[2]]
        
        # Create and run CheckInstance
        check_instance = checks.CheckInstance(check)
        check_instance.run()
        log.info("Check execution completed!")

initdb(None)

global_check_registry = checks.CheckRegistry()  #TODO: temp
create_test_data()    #TODO: temp
create_test_checks()  #TODO: temp

function_map = {'test' : test, 
                'run' : run,
                'initdb': initdb }

if len(sys.argv) > 1:
    if sys.argv[1] in function_map:
        func = function_map[sys.argv[1]]
        func(sys.argv)
