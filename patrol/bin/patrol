import os 
import sys
import logging
import sqlite3
import argparse

# TODO: This is just a temp work-around that adds parent project directory to sys.path
dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(dir_path+'/../..')

from patrol.conf import conf
from patrol.executors import DEFAULT_EXECUTOR

from patrol import checks
from patrol import jobs
from patrol import executors

if __name__ == '__main__':

    def print_header():
        HEADER = """\
            .______      ___   .___________.______       ______    __      
        |   _  \    /   \  |           |   _  \     /  __  \  |  |     
        |  |_)  |  /  ^  \ `---|  |----|  |_)  |   |  |  |  | |  |     
        |   ___/  /  /_\  \    |  |    |      /    |  |  |  | |  |     
        |  |     /  _____  \   |  |    |  |\  \----|  `--'  | |  `----.
        | _|    /__/     \__\  |__|    | _| `._____|\______/  |_______|
        """
        print(HEADER)

    #TODO: This is a temporary function for running tests
    def create_test_data():
        conn = sqlite3.connect("consumerdb.db")

        with conn:
            cursor = conn.cursor()
            cursor.execute("CREATE TABLE IF NOT EXISTS customers (customer_id INT, first_name TEXT, last_name TEXT)")
            cursor.execute("DELETE FROM customers")
            cursor.execute("INSERT INTO customers SELECT 1, 'Jeff', 'Smith'")
            cursor.execute("INSERT INTO customers SELECT 24, 'Bill', NULL")

            cursor.execute("CREATE TABLE IF NOT EXISTS orders (order_id INT, customer_id INT, order_descr TEXT, order_amt NUMERIC)")
            cursor.execute("DELETE FROM orders")
            cursor.execute("INSERT INTO orders SELECT 10010, 1, 'Service Q1', 500")
            cursor.execute("INSERT INTO orders SELECT 10011, 1, 'Service Q1', 500")
            cursor.execute("INSERT INTO orders SELECT 10012, 1, 'Service Q1', NULL")
            cursor.execute("INSERT INTO orders SELECT 10014, 209, 'Service Q3', 800")
            cursor.execute("INSERT INTO orders SELECT 10014, 577, 'Service Q3', 800")
            cursor.execute("INSERT INTO orders SELECT 10014, 591, 'Service Q3', 800")
            cursor.execute("INSERT INTO orders SELECT 10014, 1024, 'Service Q3', 800")

    #TODO: This is a temporary function for running tests
    def create_test_checks():
        sql_check_1 = checks.SqlCheck("sql_check_1", 
                                        """
                                            SELECT 
                                                CASE 
                                                    WHEN row_count = 0 THEN 0
                                                    ELSE 2
                                                END as result, 
                                                *
                                            FROM
                                            (
                                                SELECT 
                                                    COUNT(*) OVER () as row_count,
                                                    * 
                                                FROM orders ord
                                                LEFT JOIN customers cus ON ord.customer_id = cus.customer_id
                                                WHERE cus.customer_id IS NULL
                                            )
                                        """)
        sql_check_2 = checks.SqlCheck("sql_check_2",
                                        """
                                            SELECT 
                                                CASE 
                                                    WHEN row_count = 0 THEN 0
                                                    ELSE 2
                                                END as result, 
                                                *
                                            FROM
                                            (
                                                SELECT 
                                                    COUNT(*) OVER () as row_count,
                                                    * 
                                                FROM customers cus
                                                WHERE cus.first_name IS NULL OR cus.last_name IS NULL
                                            )
                                        """)

        # Add checks to CheckRegistry
        # this is a temp hack, we will implement checks auto discovery and load from JSON files
        global_check_registry.add_check(sql_check_1)
        global_check_registry.add_check(sql_check_2)
    
    #TODO: This is a temporary function for running tests
    def test(args):
        print_header()
        
        # Test: Create and run an on-demand job
        job = jobs.OnDemandJob()
        job.add_check_to_job(global_check_registry.checks["sql_check_1"])
        job.add_check_to_job(global_check_registry.checks["sql_check_2"])
        job.run()
        print("DONE!")

    def run(args):
        if len(sys.argv) > 2:
            # Get check from CheckRegistry
            check = global_check_registry.checks[sys.argv[2]]
            print("Retrieved the following check from CheckRegistry:", check.check_id)
            
            # Create and run CheckInstance
            check_instance = checks.CheckInstance(check)
            check_instance.run()


    global_check_registry = checks.CheckRegistry()  #TODO: temp
    create_test_data()    #TODO: temp
    create_test_checks()  #TODO: temp

    function_map = {'test' : test, 
                    'run' : run }

    if len(sys.argv) > 1:
        if sys.argv[1] in function_map:
            func = function_map[sys.argv[1]]
            func(sys.argv)
